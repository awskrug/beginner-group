---
import { type CollectionEntry, getCollection } from "astro:content";
import BackToPrev from "@components/BackToPrev.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import PageLayout from "@layouts/PageLayout.astro";

import "@utils/polyfilsResolver.ts";

export async function getStaticPaths() {
	const sessions = (await getCollection("sessions"))
		.filter((post) => !post.data.draft)
		.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
	return sessions.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"sessions">;

const session = Astro.props;
const { Content } = await session.render();

const baseUrl = import.meta.env.BASE_URL;
---

<PageLayout title={session.data.title} description={session.data.description}>
  <Container>
    <div class="animate">
      <BackToPrev href={baseUrl}> Back </BackToPrev>
    </div>
    <article class="animate mt-10">
      <Content />
    </article>

    <div class="animate mt-10">
      <div class="font-base text-sm">
        <FormattedDate date={session.data.date} />
      </div>
      <h1 class="text-2xl mt-1 font-semibold">
        {session.data.title}
      </h1>
      {
        session.data.description && (
          <p class="mt-2 text-zinc-600 dark:text-zinc-400">
            {session.data.description}
          </p>
        )
      }
      <div class="flex items-center mt-4">
        {
          session.data.speakerImageURL && (
            <img
              src={session.data.speakerImageURL}
              alt=""
              class="rounded-full w-12 h-12 mr-4"
            />
          )
        }
        <p>
          {session.data.speaker}
        </p>
      </div>
    </div>
  </Container>
</PageLayout>
